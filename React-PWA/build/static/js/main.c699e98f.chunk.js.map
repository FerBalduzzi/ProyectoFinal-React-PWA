{"version":3,"sources":["components/conponentesSecundarios/componenteAppSpring.jsx","components/App.jsx","serviceWorkerRegistration.js","index.js"],"names":["componenteApp","state","titulo","descrip","tareas","id","AgregarYActulizarTarea","bind","ManejarElCambio","this","Obtenertareas","e","console","log","fetch","method","body","JSON","stringify","headers","Accept","then","res","json","data","setState","toast","success","position","BOTTOM_LEFT","catch","err","preventDefault","error","target","name","value","className","onSubmit","type","placeholder","onChange","Button","variant","autoClose","Table","hover","size","responsive","map","tarea","key","onClick","EliminarTarea","ObtenerIdParaActualizar","Component","App","users","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c699e98f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Table } from \"reactstrap\";\n//import axios from 'axios';\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n//para utilizar esta interfaz grafica completa de CRUD para SPRING BOOT\n//solo se modifico en los metodos fetch la url asi el servidor que apunta y donde se encuentran los datos\n//1.- que fue la siguiente ruta  http://localhost:8080/api/tareas/ en todos los fetch\n\n//2.- lo siguiente que se modifico fue el id que por alguna razon se renombro de _id a id\n\n//3.-se agrego un catch al eliminar\n\n//clase del componenteApp\nclass componenteApp extends Component {\n  //contructor de la componenteApp\n  constructor() {\n    //con el coonstructor nos permite inicializar el componente\n    //contructor de la clase y del componente web\n    //que nos permite heradar todos metodos,fucionalidades,clases, asi como manipular estado del componente  de react\n    super();\n\n    //estado del componente web de react son las propiedates\n    this.state = {\n      //desde aqui podemos inicilizar valores de las propiedades del componente\n      //podemos inicializar los valores vacios al iniciar el componente\n      titulo: \"\",\n      descrip: \"\",\n      tareas: [],\n      id: \"\",\n    };\n    //vincular el metodo al estado del componente\n    this.AgregarYActulizarTarea = this.AgregarYActulizarTarea.bind(this);\n    this.ManejarElCambio = this.ManejarElCambio.bind(this);\n  }\n\n  //componentDidMount se usa para cuando deseamos cargar datos alguna otra cosa inmediatemente despues iniciar la interfaz y lo primero que se renderiza del  componente\n  componentDidMount() {\n    //console.log(\"el componente fue montado...\");\n    this.Obtenertareas();\n  }\n  /***************************Eventos o metodos del componente*************************************/\n  //eventp o metodo para  inssertay o actulizar una tarea, que hace una peticion al servidor por metodo POST para insertar o por metodo PUT para actualizar\n  AgregarYActulizarTarea(e) {\n    if (this.state.id) {\n      //axios.get\n      //axios.post\n      //axios.put\n      //axios.delete\n\n      //console.log(\">>>>>>>>>>>>>>>>>>>>>>>><\"+this.state._id)\n      console.log(\"si exite un id actulizalo\");\n      fetch(\"http://localhost:8080/api/tareas/\" + this.state.id, {\n        method: \"PUT\",\n        body: JSON.stringify(this.state),\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          console.log(data);\n          this.setState({ titulo: \"\", descrip: \"\", id: \"\" });\n          this.Obtenertareas();\n          toast.success(\"Tarea actualizada...\", {\n            position: toast.BOTTOM_LEFT,\n          });\n        });\n    } else {\n      console.log(\"no exite un id de inicio, inserta nuevo registro\");\n\n      //para verificar si esta funcionando el metodo al dar clik por mensaje en consola\n      //console.log(\"agregar tarea...\");\n      //para mostrar el estado del componente por consola\n      //console.log(this.state);\n\n      //para mandar datos hacia el servidor usaremos el metodo fetch\n      //se debe especificar hacia que ruta se hara la peticion en este caso \"/api/tareas\"\n      //que es el api que ya hemos creado\n\n      //en ves de usar fetch como metodo de envio de datos se puede usar la libreria superint, asios\n      //para hacer una peticion al servidor en este caso de insertar datos por el metodo post en formato json\n      fetch(\"http://localhost:8080/api/tareas/\", {\n        //metodo post se usa para insertar datos\n        method: \"POST\",\n        //para convertir el estado a un string json\n        body: JSON.stringify(this.state),\n        headers: {\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json\",\n        },\n      })\n        //.then(res => console.log(res))\n        .then((res) => res.json())\n        //.then(data => console.log(data))\n        .then((data) => {\n          console.log(data);\n          //intentar mandar una notificacion de que ha sido enviada la peticion\n          //de forma grafica\n          //<ComponenteToast/>\n          this.setState({ titulo: \"\", descrip: \"\" });\n          this.Obtenertareas();\n          toast.success(\"Tarea agregada...\", {\n            position: toast.BOTTOM_LEFT,\n          });\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n\n    //para evitar refresco en la vista al enviar datos\n    e.preventDefault();\n  }\n  //evento o metodo mostrar y listar los registros , que hace una peticion al servidor por el metodo GET\n  Obtenertareas() {\n    fetch(\"http://localhost:8080/api/tareas/\")\n      .then((res) => res.json())\n      //.then(data => console.log(data))\n      .then((data) => {\n        //console.log(data);\n        this.setState({ tareas: data });\n        console.log(this.state.tareas);\n      });\n  }\n  //evento o metodo eliminar registros, que hace una peticion al servidor por el metodo DELETE\n  EliminarTarea(id) {\n    //if(window.confirm(\"estas seguro que deseas eliminar este registro...\")){\n    //para concatenar con + y con {$}\n    console.log(\"eliminando tarea...\", id);\n    //peticion al servidorr para eliminar\n    //manera de concatenas con +\n    //fetch(\"/api/tareas/\"+id)\n    //manera de concatenas con ${}\n    fetch(\"http://localhost:8080/api/tareas/\" + id, {\n      method: \"DELETE\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        this.Obtenertareas();\n      })\n      .catch((err) => {\n        console.log(err);\n        this.Obtenertareas();\n        toast.error(\"Tarea elimnada...\", {\n          position: toast.BOTTOM_LEFT,\n        });\n      });\n  }\n  //evento o metodo que obtiene el registro por medio del ID seleccionado, donde se hace una peticion de un solo resgistro\n  async ObtenerIdParaActualizar(id) {\n    // //console.log(\"actualizando tarea...\"+id);\n    await fetch(\"http://localhost:8080/api/tareas/\" + id)\n      .then((res) => res.json()) //convierte la peticion a formato json\n      .then((data) => {\n        console.log(data);\n        //actualiza el estado\n        this.setState({\n          titulo: data.titulo,\n          descrip: data.descrip,\n          id: data.id,\n        });\n      }); // mustra los datos obtenidos por consola\n  }\n  //evento que supervisa y inserion de datos en el formuario\n  ManejarElCambio(e) {\n    //e.target obtiene todo el elemento al detectar el evento\n    //e.target.value obtiene el valor especifico del elemento al detectar el evento\n    //e.target.name obtiene el nombre especifico del elemento al detectar el evento\n    //console.log(e.target.name);\n    //obtenemos el nombre y el valor de target o elemento input del formulario\n    const { name, value } = e.target;\n    //cambiamos el estado del componente mediante el metodo setState\n    this.setState({\n      [name]: value,\n    });\n  }\n  /***************************Eventos o metodos del componente*************************************/\n\n  //metodo para renderizar contenido en html dinamico mediante JSX, estas no son stiqutas HTML\n  render() {\n    return (\n      <div>\n        <div className=\"row fondoDiv3 \">\n          <div className=\"col-12\">\n            <h1>ANOTACIONES PROYECTOS</h1>\n            <h6>Anotaciones de tareas pendientes y proximos proyectos</h6>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-4 fondoDiv1\">\n            <h3>Ingresar datos</h3>\n            <form onSubmit={this.AgregarYActulizarTarea} method=\"post\">\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  {/*usamos la propieddad name para identificar a lo imputs, a este lo llamamos titulo*/}\n                  {/*en este caso verficamos cuando se escriba cualquier cosa con el evento onchange por el metodo ManejarElCambio*/}\n                  <input\n                    type=\"text\"\n                    name=\"titulo\"\n                    placeholder=\"Titulo\"\n                    onChange={this.ManejarElCambio}\n                    value={this.state.titulo}\n                  />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  {/*usamos la propieddad name para identificar a lo imputs , a este lo llamamos descrip*/}\n                  {/*en este caso verficamos cuando se escriba cualquier cosa con el evento onchange por el metodo ManejarElCambio*/}\n                  {/* <textarea type=\"text\" name=\"descrip\"  placeholder=\"Descripcion\" onChange={this.ManejarElCambio} value={this.state.descrip}></textarea> */}\n                  <input\n                    type=\"text\"\n                    name=\"descrip\"\n                    placeholder=\"Descripcion\"\n                    onChange={this.ManejarElCambio}\n                    value={this.state.descrip}\n                  ></input>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-12\">\n                  <Button variant=\"primary\" type=\"submit\">\n                    Insertar\n                  </Button>\n                  <br />\n                </div>\n              </div>\n              <ToastContainer autoClose={1500} />\n            </form>\n          </div>\n          <div className=\"col-8 fondoDiv2\">\n            <h3>Muestreo de datos </h3>\n            <Table hover size=\"sm\" responsive>\n              <thead>\n                <tr>\n                  <th>Titulo</th>\n                  <th>Descripcion</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.tareas.map((tarea) => {\n                  return (\n                    <tr key={tarea.id}>\n                      <td> {tarea.titulo} </td>\n                      <td> {tarea.descrip} </td>\n                      <td>\n                        <Button\n                          variant=\"primary\"\n                          onClick={() => this.EliminarTarea(tarea.id)}\n                        >\n                          Eliminar\n                        </Button>\n                        <br />\n                      </td>\n                      <td>\n                        <Button\n                          variant=\"primary\"\n                          onClick={() => this.ObtenerIdParaActualizar(tarea.id)}\n                        >\n                          Actualizar\n                        </Button>\n                        <br />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </Table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n//para poder exportar el ponponente y ser usado en otro componente\nexport default componenteApp;\n","import React,{Component} from 'react'\nimport { Container } from 'reactstrap';\n//import logo from './logo.svg';\nimport './App.css';\nimport ComponenteAppSring  from './conponentesSecundarios/componenteAppSpring';\n\n\n//instaciacion de compoenenteCRUD\n\n//clase para crear el componente de vista\nclass App extends Component{\n\n  \n  //contructor del compoenente \n  constructor(){\n    //es necesario usar el super cuando se extiende de la clase component\n    super()\n    //se inicia el estado y se asigna un arreglo de datos \n    this.state={users: []}\n  }\n\n  render() {\n    //se renderiza los datos que se han obtenido de al cargar el arreglo y solo se muestran \n    return (\n      <Container>\n          <div className=\"App\">\n               <ComponenteAppSring/>              {/* UI para back-end del framework Spring boot de java */}\n          </div>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (\"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    // if (publicUrl.origin !== window.location.origin) {\n    //   // Our service worker won't work if PUBLIC_URL is on a different origin\n    //   // from what our page is served on. This might happen if a CDN is used to\n    //   // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n    //   return;\n    // }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      // registration.onupdatefound = () => {\n      //   const installingWorker = registration.installing;\n      //   if (installingWorker == null) {\n      //     return;\n      //   }\n      //   installingWorker.onstatechange = () => {\n      //     if (installingWorker.state === \"installed\") {\n      //       if (navigator.serviceWorker.controller) {\n      //         // At this point, the updated precached content has been fetched,\n      //         // but the previous service worker will still serve the older\n      //         // content until all client tabs are closed.\n      //         console.log(\n      //           \"New content is available and will be used when all \" +\n      //             \"tabs for this page are closed. See https://cra.link/PWA.\"\n      //         );\n      //         // Execute callback\n      //         if (config && config.onUpdate) {\n      //           config.onUpdate(registration);\n      //         }\n      //       } else {\n      //         // At this point, everything has been precached.\n      //         // It's the perfect time to display a\n      //         // \"Content is cached for offline use.\" message.\n      //         console.log(\"Content is cached for offline use.\");\n      //         // Execute callback\n      //         if (config && config.onSuccess) {\n      //           config.onSuccess(registration);\n      //         }\n      // }\n      // }\n      // };\n      // };\n      // console.log(\"aca llega\");\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n//estilos de css de bootstrap\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n//mis estilos propios\nimport \"./components/conponentesSecundarios/componenteApp.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorkerRegistration.unregister();\n"],"sourceRoot":""}